
# https://betterprogramming.pub/build-a-search-engine-for-medium-stories-using-streamlit-and-elasticsearch-b6e717819448
# https://docs.streamlit.io/library/get-started/create-an-app

from typing import Dict
import pathlib
import os
import requests

from elasticsearch.client import Elasticsearch
import streamlit as st
import pandas as pd

from es import ElasticsearchManager
from geolocation import CachedGeolocator, region_fixer, locality_fixer
from config import ES_URI, ES_INDEX

## BACKEND

@st.experimental_singleton
def get_locator():
    return CachedGeolocator(verbose=False)

@st.experimental_singleton
def get_es_manager():
    return ElasticsearchManager(
        client=Elasticsearch(hosts=ES_URI)
    )

@st.cache
def get_tender_info(uid:str) -> Dict:
    response = requests.get(url=f'https://public.api.openprocurement.org/api/2.5/tenders/{uid}')
    response.raise_for_status()

    return response.json()

@st.cache
def get_geopoint(locality, region, countryName, **kw):
    locator = get_locator()
    geo_query_info=" ".join([locality_fixer(locality),region_fixer(region), countryName])
    print(geo_query_info)
    return locator(geo_query_info)

def calc_recall(pred, true):
    tp = [1 for p in pred if p in true]
    return sum(tp)/len(true) if true else 0

## UI

def draw_search_widget(product_description, product_code=None, geo_point=None, benchmark_suppliers=None):
    es_mgr = get_es_manager()

    if st.button(label="–ü–æ—à—É–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤"):

        hits = es_mgr.search(
            product_description=product_description,
            product_code=product_code,
            geo_point=geo_point
        )

        pred = [hit['_source']['edr_code'] for hit in hits]        
        recall = calc_recall(pred, benchmark_suppliers)

        col1, col2, col3 = st.columns(3)
        col1.metric("–ö-—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤", "~2.6")
        col2.metric("–£—Å–ø—ñ—Ö %", "83 %")
        col3.metric("Recall@10", "{:.2f} %".format(recall*100))

        df = pd.DataFrame.from_records([
            {
                '–í–≥–∞–¥–∞–≤?': '–¢–∞–∫' if hit['_source']['edr_code'] in benchmark_suppliers else '–ù—ñ',
                '–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫':hit['_source']['company_name'],
                '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞': hit['_source']['contact_name'],
                'Email':hit['_source']['contact_email'],
            }
        for hit in hits
        ])  

        st.dataframe(df)

        st.balloons()

def show_inro():

    release_notes = f"""
    ---
    **Highlights**
    - üß† Introducing `st.session_state` and widget callbacks to allow you to add statefulness to your apps. Check out the [blog post](http://blog.streamlit.io/session-state-for-streamlit/)
    **Notable Changes**
    - ü™Ñ `st.text_input` now has an `autocomplete` parameter to allow password managers to be used
    **Other Changes**
    - Using st.set_page_config to assign the page title no longer appends ‚ÄúStreamlit‚Äù to that title ([#3467](https://github.com/streamlit/streamlit/pull/3467))
    - NumberInput: disable plus/minus buttons when the widget is already at its max (or min) value ([#3493](https://github.com/streamlit/streamlit/pull/3493))
    """
    st.write(
        f"""
        # –í—ñ—Ç–∞—î–º–æ —É –ü—Ä–æ–∑–æ—Ä—Ä–æ–º—É –ü–æ—à—É–∫—É –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ ! üëã
        """
    )

    st.write(
        f"""
        ü™üüîé –ü—Ä–æ–∑–æ—Ä—Ä–∏–π –ü–æ—à—É–∫
        """
    )

    # st.write(release_notes)

def show_search():
        
    # dk = get_dk021()

    geo_point = None
    region = st.selectbox(label='Select region', options=['--','Lviv Rgn', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'])
    if region!='--':
        locality = st.text_input(label='Locality')
        streetAddress = st.text_input(label='Street/Address',placeholder='–≤—É–ª—é –õ–µ–Ω–æ–Ω–∞, 123')
        if locality:
            geo_point = get_geopoint(locality=locality, region=region, countryName='–£–∫—Ä–∞—ó–Ω–∞')

    product_description = st.text_input('Enter product description:')

    product_code = None
    # codes1 = {c.description: c.code for c in dk.children.values()}
    # product_desc1 = st.selectbox(label='Code L1', options=list(codes1.keys()))
    
    # if product_desc1:

    #     codes2 = {c.description: c.code for c in dk.get_level_category(code=codes1[product_desc1],level=1).children.values()}
    #     product_desc2 = st.selectbox(label='Code L2', options=list(codes2.keys()))
        
    #     if product_desc2:

    #         codes3 = {c.description: c.code for c in dk.get_level_category(code=codes2[product_desc2],level=2).children.values()}
    #         product_desc3 = st.selectbox(label='Code L3', options=list(codes3.keys()))

    #         product_code=codes3[product_desc3]

    #         st.write(product_desc3)
    #         st.write(product_code)

    if product_description:
        draw_search_widget(product_description, product_code, geo_point)

def show_search_by_id():
    
    st.write(
        f"""
        ## ü™üüîé –ü—Ä–æ–∑–æ—Ä—Ä–∏–π –ü–æ—à—É–∫
        """
    )
    
    parent_dir = pathlib.Path(__file__).parent.resolve()
    
    with st.expander("–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è?"):
        st.write("""
            –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä—É.

            –°—Ç–∞—Ä–∞—î—Ç—å—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –ø–æ–∫—É–ø—Ü—è.
            
            –ó–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –ø–æ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—ñ–≤, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ—ó –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤.

        """)

        st.write("""

            
            [–ü—Ä–∏–∫–ª–∞–¥ —Ç–µ–Ω–¥–µ—Ä—É.](https://prozorro.gov.ua/tender/UA-2021-03-23-009357-c)

        """)

        st.write("""

            `b313afb97ea646fda06176e82cbe9992` - –ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è ^^^
            `98d54c150056474fbedb5420f8aad0d9` - –º–µ–¥–∏—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏

        """)

        st.image(image=os.path.join(parent_dir, 'img', 'ex1.png'), caption='–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä')

    uid = st.text_input(label='–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä', help='–®—É–∫–∞–π –Ω–∞ https://prozorro.gov.ua/')

    if uid:
        tender_info = get_tender_info(uid=uid)['data']
        
        with st.expander("–î–µ—Ç–∞–ª—ñ"):
            st.json(body=tender_info)

        buyer_name = tender_info["procuringEntity"]['name']
        buyer_address = tender_info["procuringEntity"]['address']
        benchmark_suppliers = list(set([bid['tenderers'][0]['identifier']['id'] for bid in tender_info['bids']]))
        item_description_code = {item['description']: item['classification']['id'] for item in tender_info['items']}

        product_description = " ".join(list(item_description_code.keys()))
        product_code = list(item_description_code.values())[0]

        geo_point = get_geopoint(**buyer_address)
        
        st.text(body=buyer_name)
        st.text(body=product_description)
        st.text(body=product_code)
        if geo_point:
            st.text(body=f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è {geo_point[0]}  {geo_point[1]}")
       
        draw_search_widget(product_description, product_code, geo_point, benchmark_suppliers)

def show_settings():
    es_mgr = get_es_manager()

    if st.button(label='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'): 
        try:
            index_stat = es_mgr.client.indices.stats()
            doc_count = index_stat['indices'][ES_INDEX]['primaries']['docs']['count']
            st.warning(f"–ü—Ä–æ—ñ–¥–Ω–µ–∫—Å–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ {doc_count}(—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤)")
        except RuntimeError as e:
            st.exception(e)
    
    dataset = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏",)
    if dataset is not None:
        if st.button(label='–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å', on_click=es_mgr.create_index):
            st.success("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å!")

        if st.button(label='–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å', on_click=es_mgr.populate_index, args=(dataset,)):
            st.success("–Ü–Ω–¥–µ–∫—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!")

pages ={
    'üëÅÔ∏è –ü—Ä–æ —Å–µ—Ä–≤—ñ—Å':show_inro, 
    # 'Search':show_search,
    'üßç –ü–æ—à—É–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤':show_search_by_id, 
    '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':show_settings
}

def main():
    st.set_page_config(page_title=f"–ü—Ä–æ–∑–æ—Ä—Ä–∏–π –ø–æ—à—É–∫ v0.0001", initial_sidebar_state="collapsed") #, layout="wide"
    st.sidebar.title(f"–ú–µ–Ω—é")
    
    selected_demo = st.sidebar.radio("", list(pages.keys()), index=1)

    pages[selected_demo]()


if __name__ == '__main__':
    main()